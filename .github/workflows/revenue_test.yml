name: Trigger Databricks Job and Fail PR on Failure
on:
  pull_request:
    branches:
      - main  # Trigger on pull request to the main branch
jobs:
  trigger-databricks-job:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # Updated to v3 for better performance and features
      
    - name: Install curl and jq
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq
        
    - name: Trigger Databricks Job
      id: trigger_databricks
      run: |
        echo "Triggering Databricks job..."
        
        # Make the API call and capture both the response and the HTTP status code
        response=$(curl -s -w "\n%{http_code}" -X POST https://dbc-24f14931-5e2f.cloud.databricks.com/api/2.1/jobs/run-now \
          -H "Authorization: Bearer ${{ secrets.DATABRICKS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
                "job_id": ${{ secrets.DATABRICKS_JOB_ID }}
              }')
        
        # Split the response to get the HTTP status code
        http_code=$(echo "$response" | tail -n1)
        body=$(echo "$response" | sed '$d')
        
        echo "HTTP Status Code: $http_code"
        echo "Response Body: $body"
        
        # Check if the HTTP status code indicates success (2xx)
        if [[ "$http_code" != 2* ]]; then
          echo "::error::Failed to trigger Databricks job. HTTP status code: $http_code"
          echo "::error::Response: $body"
          exit 1
        fi
        
        # Extract the run_id from the response
        run_id=$(echo "$body" | jq -r '.run_id')
        
        # Check if run_id is valid
        if [[ -z "$run_id" || "$run_id" == "null" ]]; then
          echo "::error::Failed to extract run_id from response: $body"
          exit 1
        fi
        
        echo "Successfully triggered Databricks job with run_id: $run_id"
        echo "run_id=$run_id" >> $GITHUB_OUTPUT
    
    - name: Wait for Databricks Job Completion
      id: wait_for_job
      if: success()
      run: |
        run_id="${{ steps.trigger_databricks.outputs.run_id }}"
        echo "Waiting for Databricks job $run_id to complete..."
        
        # Initialize variables
        job_completed=false
        attempt=1
        max_attempts=100  # Maximum number of polling attempts (increased to 100)
        sleep_time=5      # Time to wait between polling in seconds (reduced to 5)
        
        # Create debug file for logging API responses
        debug_file="databricks_api_debug.log"
        touch $debug_file
        echo "--- Debugging started at $(date) ---" > $debug_file
        
        while [[ "$job_completed" == "false" && $attempt -le $max_attempts ]]; do
          echo "Polling attempt $attempt of $max_attempts..."
          
          # Get the current state of the job
          echo -e "\n--- API Call at $(date) ---" >> $debug_file
          
          status_response=$(curl -s -X GET "https://dbc-24f14931-5e2f.cloud.databricks.com/api/2.1/jobs/runs/get?run_id=$run_id" \
            -H "Authorization: Bearer ${{ secrets.DATABRICKS_TOKEN }}")
          
          # Log the full response for debugging
          echo "Full API response:" >> $debug_file
          echo "$status_response" >> $debug_file
          
          # Check if the response contains an error
          error_message=$(echo "$status_response" | jq -r '.error_code // empty')
          if [[ ! -z "$error_message" ]]; then
            echo "API Error: $error_message" >> $debug_file
            echo "API Error: $error_message"
            echo "result_state=ERROR" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Extract the state from the status object based on the provided format
          state=$(echo "$status_response" | jq -r '.status.state // "null"')
          
          # Map to old variables for compatibility with the rest of the script
          life_cycle_state=$state
          result_state="UNKNOWN"
          
          # Get termination details if available
          if [[ "$state" == "TERMINATED" ]]; then
            termination_reason=$(echo "$status_response" | jq -r '.status.termination_details.reason // "null"')
            result_state=$termination_reason
          fi
          
          echo "Extracted values:" >> $debug_file
          echo "- state: $state" >> $debug_file
          echo "- result_state: $result_state" >> $debug_file
          
          echo "Current state: state=$state, result_state=$result_state"
          
          # Check if the job has completed based on the new state enum values
          if [[ "$state" == "TERMINATED" || "$state" == "TERMINATING" ]]; then
            job_completed=true
            
            # Store the result state for the next step
            echo "result_state=$result_state" >> $GITHUB_OUTPUT
          else
            # Sleep before the next polling attempt
            echo "Job still running. Waiting $sleep_time seconds before next check..."
            sleep $sleep_time
            ((attempt++))
          fi
        done
        
        # Check if we exited the loop due to timeout
        if [[ "$job_completed" == "false" ]]; then
          echo "::warning::Timed out waiting for Databricks job to complete."
          echo "result_state=TIMEOUT" >> $GITHUB_OUTPUT
        fi
        
        echo "See $debug_file for detailed API responses"
    
    - name: Check Job Result
      if: success()
      run: |
        result_state="${{ steps.wait_for_job.outputs.result_state }}"
        echo "Databricks job finished with result: $result_state"
        
        if [[ "$result_state" == "SUCCESS" ]]; then
          echo "Databricks job succeeded!"
        else
          echo "::error::Databricks job did not complete successfully. Result: $result_state"
          exit 1
        fi
